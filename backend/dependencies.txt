# initialize npm
npm init -y

# install runtime deps
npm install express dotenv cors morgan bcryptjs jsonwebtoken express-validator @prisma/client pg

# install dev deps
npm install -D prisma nodemon

# initialize prisma (creates prisma/ and .env)
npx prisma init

Replace the autogenerated prisma/schema.prisma


###Download postgresql and install it 
####Launch pgAdmin4 from your Start Menu.
On the left sidebar, you’ll see:
Servers
   → PostgreSQL 18
   Click the arrow to expand “PostgreSQL 18”.

It will prompt for a password —
→ enter the one you used during installation (postgres).

If successful, you’ll see subfolders:

Databases

Login/Group Roles

Tablespaces

#####Create your AgriLink database

Right-click Databases → click Create → Database…

In the “General” tab:

Database name: agrilink

Owner: postgres

Click Save ✅

Now under Databases, you’ll see:

agrilink
postgres


This means your database exists and is ready for Prisma.

In the left tree, locate:

Servers
  → PostgreSQL 18
     → Databases
        → agrilink


Right-click PostgreSQL 18 (the server name) — not the agrilink database.

Click Properties.

You’ll now see several tabs:

General (server name)

Connection → ✅ this is the one we want.


##### (Optional) How to check your password

If you forgot the password you set for the postgres superuser:

####Option A: Reset via pgAdmin

Open pgAdmin

Expand Login/Group Roles

Right-click on postgres → Properties

Go to Definition tab

Enter a new password under “Password” and click Save

Now you can use that password in your .env file.

Now return to VS Code and test Prisma

Make sure .env has the correct connection string.

In the VS Code terminal:

npx prisma migrate dev --name init


You should see output like:

Applying migration `init`
The following migration(s) have been applied:
init


####1. What Prisma is

Prisma is a modern database toolkit for Node.js and TypeScript/JavaScript apps.

It helps your backend (in our case, Express.js) talk to your database (PostgreSQL) in a clean, safe, and easy way.


The 3 core parts of Prisma
Part	Description	Example
Prisma Schema (prisma/schema.prisma)	Defines your database tables, columns, and relationships	model User { id String @id }
Prisma Migrate	Handles database migrations (creating/updating tables automatically)	npx prisma migrate dev --name init
Prisma Client	The generated JS library you use inside your code to query the DB