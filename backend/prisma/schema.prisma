generator client {
  provider = "prisma-client-js"
  // The 'extendedErrors' feature was removed to resolve the P1012 error.
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums (No Changes)
enum UserRole {
  farmer
  buyer
  supplier
  admin
}

enum ListingCategory {
  produce
  input
}

enum ListingStatus {
  draft
  active
  reserved
  sold
  archived
}

enum OrderStatus {
  pending
  confirmed
  shipped
  delivered
  cancelled
}

// Models

model User {
  id              String         @id @default(uuid())
  email           String         @unique
  password        String
  name            String?
  phone           String?
  role            UserRole       @default(farmer)
  isActive        Boolean        @default(true)
  lastLogin       DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  
  // Relations
  profile         UserProfile?
  listings        Listing[]
  buyerOrders     Order[]        @relation("buyerOrders")
  sellerOrders    Order[]        @relation("sellerOrders")
  forumPosts      ForumPost[]
  forumComments   ForumComment[]
}

model UserProfile {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String         @unique
  farmName        String?
  region          String?
  district        String?
  latitude        Float?
  longitude       Float?
  description     String?
  profileComplete Boolean        @default(false)
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
}

model Listing {
  id              String          @id @default(uuid())
  user            User            @relation(fields: [userId], references: [id])
  userId          String
  title           String
  description     String?
  category        ListingCategory @default(produce)
  cropName        String?
  quantity        Float           @default(0) // Non-nullable with default for robustness
  quantityUnit    String          @default("kg") // Non-nullable with default
  price           Float?
  currency        String?         @default("UGX")
  region          String?
  status          ListingStatus   @default(draft)
  availableFrom   DateTime?
  availableTo     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  
  // Relations
  images          ListingImage[]
  orderItems      OrderItem[]
}

model ListingImage {
  id              String          @id @default(uuid())
  listing         Listing         @relation(fields: [listingId], references: [id])
  listingId       String
  url             String
  sortOrder       Int             @default(0)
  createdAt       DateTime        @default(now())
  
  @@index([listingId, sortOrder])
}

model Order {
  id                   String      @id @default(uuid())
  buyer                User        @relation("buyerOrders", fields: [buyerId], references: [id])
  buyerId              String
  seller               User        @relation("sellerOrders", fields: [sellerId], references: [id])
  sellerId             String
  totalAmount          Float?
  currency             String?     @default("UGX")
  status               OrderStatus @default(pending)
  shippingAddress      String?
  deliveryInstructions String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  
  // Relations
  items                OrderItem[]
  
  @@index([buyerId, status])
  @@index([sellerId, status])
}

model OrderItem {
  id              String      @id @default(uuid())
  order           Order       @relation(fields: [orderId], references: [id])
  orderId         String
  listing         Listing     @relation(fields: [listingId], references: [id])
  listingId       String
  quantity        Float       @default(1) // Non-nullable with default
  priceAtOrder    Float?
  createdAt       DateTime    @default(now())
  
  @@index([orderId])
}

model PriceData {
  id              String      @id @default(uuid())
  cropName        String
  region          String
  date            DateTime    @db.Date // Use date-only type for daily data
  avgPrice        Float?
  minPrice        Float?
  maxPrice        Float?
  source          String?
  createdAt       DateTime    @default(now())
  @@unique([cropName, region, date])
  
  @@index([region, cropName])
}

model WeatherData {
  id              String      @id @default(uuid())
  region          String
  forecastDate    DateTime    @db.Date // Use date-only type for forecast date
  provider        String?
  payload         Json?
  createdAt       DateTime    @default(now())
  @@unique([region, forecastDate, provider])
}

model ForumPost {
  id           String         @id @default(uuid())
  user         User?          @relation(fields: [userId], references: [id])
  userId       String?
  title        String?
  content      String?
  tags         String[]
  views        Int            @default(0)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  
  // âœ… FIX: Added the reverse relation for ForumComment to make it bidirectional
  comments     ForumComment[] 
}

model ForumComment {
  id              String         @id @default(uuid())
  // Relation to ForumPost
  post            ForumPost      @relation(fields: [postId], references: [id]) 
  postId          String
  user            User?          @relation(fields: [userId], references: [id])
  userId          String?
  // Self-referencing relation for nested comments/replies
  parentComment   ForumComment?  @relation("Replies", fields: [parentCommentId], references: [id])
  replies         ForumComment[] @relation("Replies")
  parentCommentId String?
  content         String
  createdAt       DateTime       @default(now())
  
  @@index([postId])
  @@index([parentCommentId])
}

model QualityGuide {
  id           String      @id @default(uuid())
  title        String
  cropName     String?
  region       String?
  content      String?
  attachments  Json?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  
  @@index([cropName, region])
}